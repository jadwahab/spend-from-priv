{"version":3,"sources":["spend.jsx","App.js","serviceWorker.js","index.js"],"names":["getUtxosFromBitIndex","address","a","options","method","headers","uri","body","addrs","json","timeout","request","utxos","sort","b","confirmations","spendableUtxos","i","length","push","bsv","Transaction","UnspentOutput","script","Script","satoshis","outputIndex","txid","broadcastTx","transactionHex","txhex","response","console","log","Spend","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","loading","privKey","PrivateKey","state","privkey","pubKeyFrom","toPublicKey","properFormatPrivKey","error","pubKeyTo","Address","fromString","pubkey","properFormatPubKey","toAddress","toString","transaction","from","change","sign","broadcastResponse","WOClink","bind","this","Label","basic","color","pointing","Divider","hidden","className","href","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Form","displayFormatLabelPrivKey","Input","placeholder","justifyContent","width","onChange","displayFormatLabelPubKey","action","content","onClick","displayWOCLink","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b2f2a18.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,\n  Image,\n  Divider,\n  Input,\n  Label,\n  TextArea\n} from \"semantic-ui-react\";\nimport bsv from \"bsv\";\nimport request from \"request-promise-native\";\n\nasync function getUtxosFromBitIndex(address) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    uri: \"https://api.bitindex.network/api/addrs/utxo\",\n    body: {\n      addrs: address\n    },\n    json: true,\n    timeout: 5000\n  };\n\n  try {\n    let utxos = await request(options);\n\n    // Sort these in descending order of confirmation (oldest first)...\n    utxos.sort((a, b) => b.confirmations - a.confirmations);\n\n    const spendableUtxos = [];\n\n    for (let i = 0; i < utxos.length; i++) {\n      let include = true;\n      // if (utxos[i].confirmations < 100) {\n      //   // Check if this is a coinbase\n      //   const tx = await getRawTransaction('BSV', utxos[i].txid)\n      //   if (tx.vin[utxos[i].vout].coinbase) {\n      //     include = false\n      //   }\n      // }\n      if (include) {\n        spendableUtxos.push(\n          new bsv.Transaction.UnspentOutput({\n            address: utxos[i].address,\n            script: bsv.Script(utxos[i].script),\n            satoshis: utxos[i].satoshis,\n            outputIndex: utxos[i].outputIndex,\n            txid: utxos[i].txid\n          })\n        );\n      }\n    }\n\n    return spendableUtxos;\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function broadcastTx(transactionHex) {\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    uri: \"https://api.whatsonchain.com/v1/bsv/main/tx/raw\",\n    body: {\n      txhex: transactionHex\n    },\n    json: true,\n    timeout: 5000\n  };\n\n  try {\n    let response = await request(options);\n\n    console.log(\"WOC response\");\n    console.log(response);\n\n    return response;\n  } catch (err) {\n    throw err;\n  }\n}\n\n// ------------------ COMPONENT ------------------\nclass Spend extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      privkey: \"\",\n      pubkey: \"\",\n      WOClink: \"\",\n      value: \"\",\n      properFormatPubKey: true,\n      properFormatPrivKey: true,\n      broadcastResponse: \"\",\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Show label invalid priv key\n  displayFormatLabelPrivKey() {\n    if (this.state.properFormatPrivKey) {\n      return \"\";\n    } else {\n      return (\n        <Label basic color=\"red\" pointing=\"below\">\n          Please enter a valid private key\n        </Label>\n      );\n    }\n  }\n\n  // Show label invalid public key\n  displayFormatLabelPubKey() {\n    if (this.state.properFormatPubKey) {\n      return \"\";\n    } else {\n      return (\n        <Label basic color=\"red\" pointing=\"below\">\n          Please enter a valid public key in compressed form\n        </Label>\n      );\n    }\n  }\n\n  displayWOCLink() {\n    if (this.state.broadcastResponse === \"\") {\n      return \"\";\n    } else {\n      return (\n        <div>\n          <Divider hidden />\n          <a\n            className=\"btn btn-primary\"\n            target=\"_blank\"\n            href={`https://www.whatsonchain.com/tx/${this.state.broadcastResponse}`}\n          >\n            What's on chain!\n          </a>\n        </div>\n      );\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = async e => {\n    if (e) {\n      e.preventDefault();\n    }\n    this.setState({ loading: true });\n\n    var privKey, pubKeyFrom, pubKeyTo;\n\n    try {\n      privKey = new bsv.PrivateKey(this.state.privkey);\n      pubKeyFrom = privKey.toPublicKey();\n      this.setState({\n        properFormatPrivKey: true\n      });\n    } catch (error) {\n      this.setState({ properFormatPrivKey: false });\n    }\n\n    try {\n      pubKeyTo = new bsv.Address.fromString(this.state.pubkey);\n      this.setState({\n        properFormatPubKey: true\n      });\n    } catch (error) {\n      this.setState({ properFormatPubKey: false });\n    }\n\n    if (privKey && pubKeyTo) {\n      let utxos = await getUtxosFromBitIndex(pubKeyFrom.toAddress().toString());\n      console.log(\"UTXOS:\");\n      console.log(utxos);\n      var transaction = new bsv.Transaction()\n        .from(utxos) // Feed information about what unspent outputs one can use\n        //   .addData(\"THRESHOLD SIGNATURE TRANSACTION 3\") // Add OP_RETURN data\n        .change(pubKeyTo)\n        .sign(privKey);\n\n      console.log(\"Tx:\");\n      console.log(transaction.toString());\n\n      try {\n        let broadcastResponse = await broadcastTx(transaction.toString());\n        this.setState({ broadcastResponse });\n      } catch (error) {\n        console.log(\"WOC broadcast error\");\n      }\n    }\n    this.setState({ loading: false });\n  };\n\n  render() {\n    return (\n      <Grid\n        textAlign=\"center\"\n        style={{ height: \"50vh\" }}\n        verticalAlign=\"middle\"\n      >\n        <Grid.Column style={{ maxWidth: 675 }}>\n          {/* <Form onSubmit={this.handleSubmit}> */}\n          <Form>\n            {this.displayFormatLabelPrivKey()}\n            <Input\n              placeholder=\"Private Key\"\n              style={{ justifyContent: \"center\", width: \"535px\" }}\n              onChange={this.handleChange}\n              name=\"privkey\"\n            />\n            <Divider></Divider>\n            {this.displayFormatLabelPubKey()}\n            <Input\n              action={{\n                content: \"Create Tx\",\n                onClick: () => this.handleSubmit()\n              }}\n              placeholder=\"Send Bitcoin Address (P2PKH)\"\n              style={{ justifyContent: \"center\", width: \"535px\" }}\n              onChange={this.handleChange}\n              name=\"pubkey\"\n            />\n          </Form>\n\n          {this.state.loading ? \"loading...\" : \"\"}\n\n          {this.displayWOCLink()}\n        </Grid.Column>\n      </Grid>\n    );\n  }\n}\n\nexport default Spend;\n","import React from \"react\";\nimport Spend from \"./spend\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nfunction App() {\n  return <Spend />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}